#!/usr/bin/python

#
# Copyright 2015 Armin Briegel
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""A tool that helps manage and manipulate `autopkg` recipes."""

import os, subprocess, shutil

import argparse
from argparse import RawTextHelpFormatter

recipeutil_version = '0.1'
args=[]

def logger(log, v=0):
    if args.verbosity >= v:
        print log;

def cmdexec(command):
    """Execute a command."""

    # if 'command' is a string, split the string into components
    if isinstance(command, str):
        command = command.split()

    proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = proc.communicate()

    logger("cmdexec: %s, result: %s, error: %s" % (command, stdout, stderr), 3)

    # strip trailing whitespace, which would mess with string comparisons
    return {"return_code": proc.returncode, "stderr": stderr.rstrip(), "stdout": stdout.rstrip()}

def get_recipe_data(recipe_name_or_id):
    cmd_result = cmdexec(["autopkg", "info", recipe_name_or_id])
    if (cmd_result['return_code'] == 0):
        recipe_data = {"full_info":cmd_result['stdout'], 'name':recipe_name_or_id}
        for l in cmd_result['stdout'].splitlines():
            if l.startswith("Identifier:"):
                recipe_data['identifier'] = l[21:]
            if l.startswith("Recipe file path:"):
                recipe_data['path'] = l[21:]
            if l.startswith("Parent recipe(s):"):
                recipe_data['parent_path'] = l[21:]
        logger(recipe_data, 3)
        return recipe_data
    else:
        print "cannot read recipe %s! (return_code = %d)" % (recipe_name_or_id, cmd_result['return_code'])
        exit(1)


#stolen from munkiimport
def raw_input_with_default(prompt='', default=''):
    '''Get input from user with a prompt and a suggested default value'''

    if default:
        prompt = '%s [%s]: ' % (prompt, default)
        return raw_input(prompt).decode('UTF-8') or default.decode('UTF-8')
    else:
        # no default value, just call raw_input
        return raw_input(prompt + ": ").decode('UTF-8')


def get_pref(pref_key, default=None):
    pref_domain = "com.github.autopkg"
    r = cmdexec(["defaults", "read", pref_domain, pref_key])
    if r["return_code"] == 0:
        return r["stdout"]
    
    if pref_key in os.environ:
        return os.environ[pref_key]
    
    return default


def recipe_info(recipe_data):
    print recipe_data["full_info"]

def recipe_which(recipe_data):
    print recipe_data["path"]

def recipe_id(recipe_data):
    print recipe_data["identifier"]

def recipe_open(recipe_data):
    path = recipe_data['path']
    cmdexec(['open', path])

def recipe_reveal(recipe_data):
    path = recipe_data['path']
    cmdexec(['open', '-R', path])

def recipe_edit(recipe_data):
    path = recipe_data['path']
    editor_string = get_pref('RECIPE_EDITOR')
    if editor_string is None:
        editor_string = get_pref('EDITOR')
    
    editor = editor_string.split()
    editor.append(path)
    if len(args.extra_args) > 0:
        editor.extend(args.extra_args)
    logger("Editor: %s" % (editor), 2)
    cmdexec(editor)

def recipe_status(recipe_data):
    dir_path = os.path.dirname(recipe_data['path'])
    cmds = ['git', '-C', dir_path, 'status']
    if len(args.extra_args) > 0:
        cmds.extend(args.extra_args)
    logger(cmds, 2)
    result = cmdexec(cmds)
    print result['stdout']
    

def get_cache_folder(recipe_data):
    cache_root = get_pref("CACHE_DIR")
    #logger(cache_root, 3)
    if not os.path.isdir(cache_root):
        print "cannot find CACHE_DIR: %s" % (cache_root)
        exit(1)
    
    cache_dir = os.path.join(cache_root, recipe_data["identifier"])
    if not os.path.isdir(cache_dir):
        print "cannot find cache folder: %s" % (cache_dir)
        exit(1)
        
    return cache_dir
    

def open_cache(recipe_data):
    cache_dir = get_cache_folder(recipe_data)
    
    cmdexec(['open', cache_dir])

def clear_cache(recipe_data):
    cache_dir = get_cache_folder(recipe_data)
    
    shutil.rmtree(cache_dir)
    
    print "Deleted cache folder: %s" % (cache_dir)
    

def clone_recipe(recipe_data):
    return

def child_recipe(recipe_data):
    return

def test_pref (recipe_data):
    if len(args.extra_args) > 0:
        keys=args.extra_args
    
    for x in keys:
        print "%s: %s" %(x, get_pref(x))



if __name__ == "__main__":
    actions = { 
        'info':recipe_info, 
        'which': recipe_which, 
        'path': recipe_which, 
        'identifier':recipe_id , 
        'id':recipe_id, 
        'open':recipe_open,
        'reveal':recipe_reveal,
        'show': recipe_reveal,
        'edit': recipe_edit,
        'status': recipe_status,
        'cache': open_cache,
        'clearcache': clear_cache,
        'duplicate': clone_recipe,
        'procreate': child_recipe,
        'newchild': child_recipe,
        'pref': test_pref,
        }
    # step 0: parse input from cli

    # for convenience link to argparse tutorial:
    # https://docs.python.org/2/howto/argparse.html#id1
    parser = argparse.ArgumentParser(description='A tool that helps manage and manipulate `autopkg` recipes.', 
                    epilog="""actions can be one of the following:
    info                synonym for `autopkg info`
    which or path       prints the path to the recipe_id
    identifier or id    prints the identifier for the recipe
    open                opens recipe with default application for recipe files
    reveal or show      reveals the recipe file in the Finder
    edit                opens the recipe in the text editor set in $EDITOR
                        if $RECIPE_EDITOR is set it will be used instead
    status              runs 'git status' on the directory enclosing the recipe
    cache               opens the cache folder for this recipe in the finder
    clearcache          deletes the cache folder for this recipe
    duplicate           prompts for a new identifier and creates a copy of the recipe in the CWD
    newchild            prompts for a new identifier and creates a new stub recipe with the given recipe as a parent
    
    for 'status' and 'edit' additional options will be passed into the command
    e.g.: recipeutil status Firefox.download --short
    """, formatter_class=RawTextHelpFormatter)

    parser.add_argument('--version', help='prints the version', action='version', version=recipeutil_version)

    parser.add_argument('action', choices=sorted(actions.keys()), help='action to be applied to the recipe')

    parser.add_argument("-v", "--verbosity", action="count", default=0, help="controls amount of logging output (max -vvv)")
    parser.add_argument("-n", "--names", action="store_true", help="prints the recipes' names before the info.")

    parent_option_group = parser.add_mutually_exclusive_group()
    parent_option_group.add_argument('--parent', '-p', action='store_true', help="apply the action to parent of the recipe")
    parent_option_group.add_argument('--all-parents', '-a', action='store_true', help="apply the action to the recipe and all its parents")

    parser.add_argument('recipe_name_or_id', help="the recipe name or id")
    parser.add_argument('extra_args', nargs=argparse.REMAINDER, help="extra arguments will be passed through to 'edit' and 'status' commands")

    # finally, actually parse the arguments
    args = parser.parse_args()
    logger(args, 3)
    #args.func(args)

    # get the recipe data
    recipe_data = get_recipe_data(args.recipe_name_or_id)
    
    # if --parent is set, replace recipe_data with its parent
    if args.parent:
        if 'parent_path' in recipe_data:
            recipe_data = get_recipe_data(recipe_data['parent_path'])
        else:
            print "%s does not have a parent recipe!" % (args.recipe_name_or_id)
            exit(1)
    
    recipe_list = [recipe_data]
    
    # if --all-parents is set work through the list
    
    if args.all_parents:
        while 'parent_path' in recipe_data:
            recipe_data = get_recipe_data(recipe_data['parent_path'])
            recipe_list.append(recipe_data)
    
    # apply action to all items in recipe_data
    l = len(recipe_list)
    for r in recipe_list:
        if args.names:
            print
            print r['name']
        actions[args.action](r)



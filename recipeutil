#!/usr/bin/python

#
# Copyright 2014 Armin Briegel
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""A tool that helps manage and manipulate `autopkg` recipes."""

import os, subprocess

import argparse

recipeutil_version = '0.1'

def logger(log, v=0):
    if args.verbosity >= v:
        print log;

def cmdexec(command):
    """Execute a command."""

    # if 'command' is a string, split the string into components
    if isinstance(command, str):
        command = command.split()

    proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = proc.communicate()

    logger("cmdexec: %s, result: %s, error: %s" % (command, stdout, stderr), 3)

    # strip trailing whitespace, which would mess with string comparisons
    return {"return_code": proc.returncode, "stderr": stderr.rstrip(), "stdout": stdout.rstrip()}

def get_recipe_data(recipe_name_or_id):
    cmd_result = cmdexec("autopkg info %s" % (recipe_name_or_id))
    if (cmd_result['return_code'] == 0):
        recipe_data = {"full_info":cmd_result['stdout']}
        for l in cmd_result['stdout'].splitlines():
            if l.startswith("Identifier:"):
                recipe_data['identifier'] = l[21:]
            if l.startswith("Recipe file path:"):
                recipe_data['path'] = l[21:]
            if l.startswith("Parent recipe(s):"):
                recipe_data['parent_path'] = l[21:]
        logger(recipe_data, 2)
        return recipe_data
    else:
        print "cannot read recipe %s! (return_code = %d)" % (recipe_name_or_id, cmd_result['return_code'])
        exit(1)


def print_version(args):
    print recipeutil_version

def recipe_info(args):
    recipe_data = get_recipe_data(args.recipe_name_or_id)
    if args.parent:
        if 'parent_path' in recipe_data:
            recipe_data = get_recipe_data(recipe_data['parent_path'])
        else:
            print "%s does not have a parent recipe!" % (args.recipe_name_or_id)
            exit(1)
    print recipe_data["full_info"]

def recipe_which(args):
    recipe_data = get_recipe_data(args.recipe_name_or_id)
    
    if args.parent:
        if 'parent_path' in recipe_data:
            print recipe_data['parent_path']
            return
        else:
            print "%s does not have a parent recipe!" % (args.recipe_name_or_id)
            exit(1)
    
    print recipe_data["path"]

def recipe_id(args):
    recipe_data = get_recipe_data(args.recipe_name_or_id)
    
    if args.parent:
        if 'parent_path' in recipe_data:
            recipe_data = get_recipe_data(recipe_data['parent_path'])
        else:
            print "%s does not have a parent recipe!" % (args.recipe_name_or_id)
            exit(1)
    
    print recipe_data["identifier"]



if __name__ == "__main__":

    # step 0: parse input from cli

    # for convenience link to argparse tutorial:
    # https://docs.python.org/2/howto/argparse.html#id1

    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_option_group = parent_parser.add_mutually_exclusive_group()
    parent_option_group.add_argument('--parent', action='store_true', help="apply the action to parent of the recipe")
    parent_option_group.add_argument('--all-parents', action='store_true', help="apply the action to recipe and all its parents")
    parent_parser.add_argument('recipe_name_or_id', help="the recipe name or id")
    
    parser = argparse.ArgumentParser(description='A tool that helps manage and manipulate `autopkg` recipes.')
    
    subparsers = parser.add_subparsers(help='verbs to apply to a recipe')
    
    subparsers.add_parser('version', description='prints the version').set_defaults(func=print_version)
    
    subparsers.add_parser('info', description='synonym for autopkg info', parents=[parent_parser]).set_defaults(func=recipe_info)
    subparsers.add_parser('id', description='prints the identifier of the recipe', parents=[parent_parser]).set_defaults(func=recipe_id)
    subparsers.add_parser('which', description='prints the path for the recipe', parents=[parent_parser]).set_defaults(func=recipe_which)
    
    parser.add_argument("-v", "--verbosity", action="count", default=0, help="amount of logging output")
    
    args = parser.parse_args()

    args.func(args)

    
